/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ws.itineraryhandler;

import flightlist.travelgood.ws.Travel;
import hotellist.travelgood.ws.Stay;
import itinerary.ws.Booking;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Map;
import javax.jws.WebService;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;

/**
 *
 * @author srnjcbsn
 */
@WebService(serviceName = "itineraryHandlerService", portName = "itineraryHandlerPortTypeBindingPort", endpointInterface = "itineraryhandler.ws.ItineraryHandlerPortType", targetNamespace = "ws.itineraryhandler", wsdlLocation = "WEB-INF/wsdl/ItineraryHandlerService/ItineraryHandler.wsdl")
public class ItineraryHandlerService 
{

    private Map<String, Map<Integer, Stay>> itineraryHotelMap = new HashMap<String, Map<Integer, Stay>>();
    private Map<String, Map<Integer, Travel>> itineraryTravelMap = new HashMap<String, Map<Integer, Travel>>();
    
    public void recordFlightBookings(flightlist.travelgood.ws.TravelOptions flightBookings, java.lang.String itineraryID) 
    {

        Map<Integer, Travel> flightMap = itineraryTravelMap.get(itineraryID);
        
        if (flightMap == null)
            flightMap = new HashMap<Integer, Travel>();
        
        for (Travel travel : flightBookings.getTravels())
            flightMap.put(travel.getBookingNumber(), travel);
        
        itineraryTravelMap.put(itineraryID, flightMap);
    }

    public void recordHotelBookings(hotellist.travelgood.ws.AccommodationOptions hotelBookings, java.lang.String itineraryID) 
    {

        Map<Integer, Stay> hotelMap = itineraryHotelMap.get(itineraryID);
        
        if (hotelMap == null)
            hotelMap = new HashMap<Integer, Stay>();
        
        for (Stay stay : hotelBookings.getStays())
            hotelMap.put(stay.getBookingNumber(), stay);
        
        itineraryHotelMap.put(itineraryID, hotelMap);
    }

    public javax.xml.datatype.XMLGregorianCalendar firstBookingDateTime(itinerary.ws.Itinerary itinerary) throws DatatypeConfigurationException 
    {
        
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        Map<Integer, Stay> hotels = itineraryHotelMap.get(itinerary.getId());
        Map<Integer, Travel> flights = itineraryTravelMap.get(itinerary.getId());
        
        if (hotels == null)
            hotels = new HashMap<Integer, Stay>();
        if (flights == null)
            flights = new HashMap<Integer, Travel>();

        GregorianCalendar minDate = null;
        
        for (Booking booking : itinerary.getBookings())
        {
            int bookingNr = booking.getBookingNumber();
            GregorianCalendar start = null;
            
            if (booking.isIsFlightElseHotel())
            {
                if (flights.containsKey(bookingNr))
                    start = flights.get(bookingNr).getFlight().getTimeTakeOff().toGregorianCalendar();
            }
            else
            {
                if (hotels.containsKey(bookingNr))
                    start = hotels.get(bookingNr).getCheckIn().toGregorianCalendar();
            }
            
            if (minDate == null || start.before(minDate))
                minDate = start;
        }
        
        if (minDate == null)
            return null;
        
        return DatatypeFactory.newInstance().newXMLGregorianCalendar(minDate);
    }

    public flightlist.travelgood.ws.Travel getTravel(int bookingNumber, java.lang.String itineraryID) 
    {
        if (itineraryTravelMap.containsKey(itineraryID))
            return itineraryTravelMap.get(itineraryID).get(bookingNumber);
        
        return null;
    }

    public hotellist.travelgood.ws.Stay getStay(int bookingNumber, java.lang.String itineraryID) 
    {
        if (itineraryHotelMap.containsKey(itineraryID))
            return itineraryHotelMap.get(itineraryID).get(bookingNumber);
        
        return null;
    }
}
